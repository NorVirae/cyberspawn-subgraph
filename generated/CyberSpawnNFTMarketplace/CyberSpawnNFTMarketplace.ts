// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NFTMarketplaceContractDeployed extends ethereum.Event {
  get params(): NFTMarketplaceContractDeployed__Params {
    return new NFTMarketplaceContractDeployed__Params(this);
  }
}

export class NFTMarketplaceContractDeployed__Params {
  _event: NFTMarketplaceContractDeployed;

  constructor(event: NFTMarketplaceContractDeployed) {
    this._event = event;
  }
}

export class OfferCancelled extends ethereum.Event {
  get params(): OfferCancelled__Params {
    return new OfferCancelled__Params(this);
  }
}

export class OfferCancelled__Params {
  _event: OfferCancelled;

  constructor(event: OfferCancelled) {
    this._event = event;
  }

  get offerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OfferCreated extends ethereum.Event {
  get params(): OfferCreated__Params {
    return new OfferCreated__Params(this);
  }
}

export class OfferCreated__Params {
  _event: OfferCreated;

  constructor(event: OfferCreated) {
    this._event = event;
  }

  get offerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OfferPurchased extends ethereum.Event {
  get params(): OfferPurchased__Params {
    return new OfferPurchased__Params(this);
  }
}

export class OfferPurchased__Params {
  _event: OfferPurchased;

  constructor(event: OfferPurchased) {
    this._event = event;
  }

  get offerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get paymentToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get paymentAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class PauseToggled extends ethereum.Event {
  get params(): PauseToggled__Params {
    return new PauseToggled__Params(this);
  }
}

export class PauseToggled__Params {
  _event: PauseToggled;

  constructor(event: PauseToggled) {
    this._event = event;
  }

  get isPaused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class UpdateAccessControls extends ethereum.Event {
  get params(): UpdateAccessControls__Params {
    return new UpdateAccessControls__Params(this);
  }
}

export class UpdateAccessControls__Params {
  _event: UpdateAccessControls;

  constructor(event: UpdateAccessControls) {
    this._event = event;
  }

  get accessControl(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateDiscountRate extends ethereum.Event {
  get params(): UpdateDiscountRate__Params {
    return new UpdateDiscountRate__Params(this);
  }
}

export class UpdateDiscountRate__Params {
  _event: UpdateDiscountRate;

  constructor(event: UpdateDiscountRate) {
    this._event = event;
  }

  get discount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateMarketplacePlatformFee extends ethereum.Event {
  get params(): UpdateMarketplacePlatformFee__Params {
    return new UpdateMarketplacePlatformFee__Params(this);
  }
}

export class UpdateMarketplacePlatformFee__Params {
  _event: UpdateMarketplacePlatformFee;

  constructor(event: UpdateMarketplacePlatformFee) {
    this._event = event;
  }

  get platformFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateOfferSalePrice extends ethereum.Event {
  get params(): UpdateOfferSalePrice__Params {
    return new UpdateOfferSalePrice__Params(this);
  }
}

export class UpdateOfferSalePrice__Params {
  _event: UpdateOfferSalePrice;

  constructor(event: UpdateOfferSalePrice) {
    this._event = event;
  }

  get offerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdatePlatformFeeRecipient extends ethereum.Event {
  get params(): UpdatePlatformFeeRecipient__Params {
    return new UpdatePlatformFeeRecipient__Params(this);
  }
}

export class UpdatePlatformFeeRecipient__Params {
  _event: UpdatePlatformFeeRecipient;

  constructor(event: UpdatePlatformFeeRecipient) {
    this._event = event;
  }

  get platformFeeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CyberSpawnNFTMarketplace__getOfferResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getOfferId(): BigInt {
    return this.value0;
  }

  get_usdtPrice(): BigInt {
    return this.value1;
  }

  get_startTime(): BigInt {
    return this.value2;
  }

  get_endTime(): BigInt {
    return this.value3;
  }
}

export class CyberSpawnNFTMarketplace__offersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getOfferId(): BigInt {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getStartTime(): BigInt {
    return this.value2;
  }

  getEndTime(): BigInt {
    return this.value3;
  }
}

export class CyberSpawnNFTMarketplace extends ethereum.SmartContract {
  static bind(address: Address): CyberSpawnNFTMarketplace {
    return new CyberSpawnNFTMarketplace("CyberSpawnNFTMarketplace", address);
  }

  CyberSpawnNFT(): Address {
    let result = super.call("CyberSpawnNFT", "CyberSpawnNFT():(address)", []);

    return result[0].toAddress();
  }

  try_CyberSpawnNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "CyberSpawnNFT",
      "CyberSpawnNFT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LIVE_PERIOD(): BigInt {
    let result = super.call("LIVE_PERIOD", "LIVE_PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LIVE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("LIVE_PERIOD", "LIVE_PERIOD():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BPS(): BigInt {
    let result = super.call("MAX_BPS", "MAX_BPS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_BPS", "MAX_BPS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cnd(): Address {
    let result = super.call("cnd", "cnd():(address)", []);

    return result[0].toAddress();
  }

  try_cnd(): ethereum.CallResult<Address> {
    let result = super.tryCall("cnd", "cnd():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  counter(): BigInt {
    let result = super.call("counter", "counter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_counter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("counter", "counter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  css(): Address {
    let result = super.call("css", "css():(address)", []);

    return result[0].toAddress();
  }

  try_css(): ethereum.CallResult<Address> {
    let result = super.tryCall("css", "css():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cssReserve(): BigInt {
    let result = super.call("cssReserve", "cssReserve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cssReserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cssReserve", "cssReserve():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currency(): Address {
    let result = super.call("currency", "currency():(address)", []);

    return result[0].toAddress();
  }

  try_currency(): ethereum.CallResult<Address> {
    let result = super.tryCall("currency", "currency():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cybercity(): Address {
    let result = super.call("cybercity", "cybercity():(address)", []);

    return result[0].toAddress();
  }

  try_cybercity(): ethereum.CallResult<Address> {
    let result = super.tryCall("cybercity", "cybercity():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  discount(): BigInt {
    let result = super.call("discount", "discount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_discount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("discount", "discount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOffer(_tokenId: BigInt): CyberSpawnNFTMarketplace__getOfferResult {
    let result = super.call(
      "getOffer",
      "getOffer(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return new CyberSpawnNFTMarketplace__getOfferResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getOffer(
    _tokenId: BigInt
  ): ethereum.CallResult<CyberSpawnNFTMarketplace__getOfferResult> {
    let result = super.tryCall(
      "getOffer",
      "getOffer(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CyberSpawnNFTMarketplace__getOfferResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  offers(param0: BigInt): CyberSpawnNFTMarketplace__offersResult {
    let result = super.call(
      "offers",
      "offers(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CyberSpawnNFTMarketplace__offersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_offers(
    param0: BigInt
  ): ethereum.CallResult<CyberSpawnNFTMarketplace__offersResult> {
    let result = super.tryCall(
      "offers",
      "offers(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CyberSpawnNFTMarketplace__offersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  path(param0: BigInt): Address {
    let result = super.call("path", "path(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_path(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("path", "path(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(): BigInt {
    let result = super.call("platformFee", "platformFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformFee", "platformFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceCss(input: BigInt): BigInt {
    let result = super.call("priceCss", "priceCss(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(input)
    ]);

    return result[0].toBigInt();
  }

  try_priceCss(input: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("priceCss", "priceCss(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(input)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reservedGas(param0: Address): BigInt {
    let result = super.call("reservedGas", "reservedGas(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_reservedGas(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reservedGas",
      "reservedGas(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uniswapRouter(): Address {
    let result = super.call("uniswapRouter", "uniswapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapRouter",
      "uniswapRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _cybercity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelOfferCall extends ethereum.Call {
  get inputs(): CancelOfferCall__Inputs {
    return new CancelOfferCall__Inputs(this);
  }

  get outputs(): CancelOfferCall__Outputs {
    return new CancelOfferCall__Outputs(this);
  }
}

export class CancelOfferCall__Inputs {
  _call: CancelOfferCall;

  constructor(call: CancelOfferCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOfferCall__Outputs {
  _call: CancelOfferCall;

  constructor(call: CancelOfferCall) {
    this._call = call;
  }
}

export class ChainalizeCndCall extends ethereum.Call {
  get inputs(): ChainalizeCndCall__Inputs {
    return new ChainalizeCndCall__Inputs(this);
  }

  get outputs(): ChainalizeCndCall__Outputs {
    return new ChainalizeCndCall__Outputs(this);
  }
}

export class ChainalizeCndCall__Inputs {
  _call: ChainalizeCndCall;

  constructor(call: ChainalizeCndCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get requiredGas(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChainalizeCndCall__Outputs {
  _call: ChainalizeCndCall;

  constructor(call: ChainalizeCndCall) {
    this._call = call;
  }
}

export class ChainalizeCssCall extends ethereum.Call {
  get inputs(): ChainalizeCssCall__Inputs {
    return new ChainalizeCssCall__Inputs(this);
  }

  get outputs(): ChainalizeCssCall__Outputs {
    return new ChainalizeCssCall__Outputs(this);
  }
}

export class ChainalizeCssCall__Inputs {
  _call: ChainalizeCssCall;

  constructor(call: ChainalizeCssCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get requiredGas(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChainalizeCssCall__Outputs {
  _call: ChainalizeCssCall;

  constructor(call: ChainalizeCssCall) {
    this._call = call;
  }
}

export class ConfirmOfferCall extends ethereum.Call {
  get inputs(): ConfirmOfferCall__Inputs {
    return new ConfirmOfferCall__Inputs(this);
  }

  get outputs(): ConfirmOfferCall__Outputs {
    return new ConfirmOfferCall__Outputs(this);
  }
}

export class ConfirmOfferCall__Inputs {
  _call: ConfirmOfferCall;

  constructor(call: ConfirmOfferCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConfirmOfferCall__Outputs {
  _call: ConfirmOfferCall;

  constructor(call: ConfirmOfferCall) {
    this._call = call;
  }
}

export class CreateOfferCall extends ethereum.Call {
  get inputs(): CreateOfferCall__Inputs {
    return new CreateOfferCall__Inputs(this);
  }

  get outputs(): CreateOfferCall__Outputs {
    return new CreateOfferCall__Outputs(this);
  }
}

export class CreateOfferCall__Inputs {
  _call: CreateOfferCall;

  constructor(call: CreateOfferCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _usdtPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateOfferCall__Outputs {
  _call: CreateOfferCall;

  constructor(call: CreateOfferCall) {
    this._call = call;
  }
}

export class SetDiscountRateCall extends ethereum.Call {
  get inputs(): SetDiscountRateCall__Inputs {
    return new SetDiscountRateCall__Inputs(this);
  }

  get outputs(): SetDiscountRateCall__Outputs {
    return new SetDiscountRateCall__Outputs(this);
  }
}

export class SetDiscountRateCall__Inputs {
  _call: SetDiscountRateCall;

  constructor(call: SetDiscountRateCall) {
    this._call = call;
  }

  get _rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDiscountRateCall__Outputs {
  _call: SetDiscountRateCall;

  constructor(call: SetDiscountRateCall) {
    this._call = call;
  }
}

export class SetPathCall extends ethereum.Call {
  get inputs(): SetPathCall__Inputs {
    return new SetPathCall__Inputs(this);
  }

  get outputs(): SetPathCall__Outputs {
    return new SetPathCall__Outputs(this);
  }
}

export class SetPathCall__Inputs {
  _call: SetPathCall;

  constructor(call: SetPathCall) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetPathCall__Outputs {
  _call: SetPathCall;

  constructor(call: SetPathCall) {
    this._call = call;
  }
}

export class ToggleIsPausedCall extends ethereum.Call {
  get inputs(): ToggleIsPausedCall__Inputs {
    return new ToggleIsPausedCall__Inputs(this);
  }

  get outputs(): ToggleIsPausedCall__Outputs {
    return new ToggleIsPausedCall__Outputs(this);
  }
}

export class ToggleIsPausedCall__Inputs {
  _call: ToggleIsPausedCall;

  constructor(call: ToggleIsPausedCall) {
    this._call = call;
  }
}

export class ToggleIsPausedCall__Outputs {
  _call: ToggleIsPausedCall;

  constructor(call: ToggleIsPausedCall) {
    this._call = call;
  }
}

export class UnchainalizeCndCall extends ethereum.Call {
  get inputs(): UnchainalizeCndCall__Inputs {
    return new UnchainalizeCndCall__Inputs(this);
  }

  get outputs(): UnchainalizeCndCall__Outputs {
    return new UnchainalizeCndCall__Outputs(this);
  }
}

export class UnchainalizeCndCall__Inputs {
  _call: UnchainalizeCndCall;

  constructor(call: UnchainalizeCndCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get requiredGas(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UnchainalizeCndCall__Outputs {
  _call: UnchainalizeCndCall;

  constructor(call: UnchainalizeCndCall) {
    this._call = call;
  }
}

export class UnchainalizeCssCall extends ethereum.Call {
  get inputs(): UnchainalizeCssCall__Inputs {
    return new UnchainalizeCssCall__Inputs(this);
  }

  get outputs(): UnchainalizeCssCall__Outputs {
    return new UnchainalizeCssCall__Outputs(this);
  }
}

export class UnchainalizeCssCall__Inputs {
  _call: UnchainalizeCssCall;

  constructor(call: UnchainalizeCssCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get requiredGas(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UnchainalizeCssCall__Outputs {
  _call: UnchainalizeCssCall;

  constructor(call: UnchainalizeCssCall) {
    this._call = call;
  }
}

export class UpdateMarketplacePlatformFeeCall extends ethereum.Call {
  get inputs(): UpdateMarketplacePlatformFeeCall__Inputs {
    return new UpdateMarketplacePlatformFeeCall__Inputs(this);
  }

  get outputs(): UpdateMarketplacePlatformFeeCall__Outputs {
    return new UpdateMarketplacePlatformFeeCall__Outputs(this);
  }
}

export class UpdateMarketplacePlatformFeeCall__Inputs {
  _call: UpdateMarketplacePlatformFeeCall;

  constructor(call: UpdateMarketplacePlatformFeeCall) {
    this._call = call;
  }

  get _platformFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMarketplacePlatformFeeCall__Outputs {
  _call: UpdateMarketplacePlatformFeeCall;

  constructor(call: UpdateMarketplacePlatformFeeCall) {
    this._call = call;
  }
}

export class UpdateOfferSalePriceCall extends ethereum.Call {
  get inputs(): UpdateOfferSalePriceCall__Inputs {
    return new UpdateOfferSalePriceCall__Inputs(this);
  }

  get outputs(): UpdateOfferSalePriceCall__Outputs {
    return new UpdateOfferSalePriceCall__Outputs(this);
  }
}

export class UpdateOfferSalePriceCall__Inputs {
  _call: UpdateOfferSalePriceCall;

  constructor(call: UpdateOfferSalePriceCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _salePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateOfferSalePriceCall__Outputs {
  _call: UpdateOfferSalePriceCall;

  constructor(call: UpdateOfferSalePriceCall) {
    this._call = call;
  }
}
